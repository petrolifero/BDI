!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	../BDI/ufftest.h	16;"	d
AFTER_TEST	../BDI/ufftest.h	131;"	d
ASSERT_EQUAL	../BDI/ufftest.h	95;"	d
ASSERT_EQUAL_CMP	../BDI/ufftest.h	111;"	d
ASSERT_FALSE	../BDI/ufftest.h	107;"	d
ASSERT_FLOAT_EQUAL	../BDI/ufftest.h	119;"	d
ASSERT_FLOAT_NOT_EQUAL	../BDI/ufftest.h	122;"	d
ASSERT_NOT_EQUAL	../BDI/ufftest.h	99;"	d
ASSERT_NOT_EQUAL_CMP	../BDI/ufftest.h	115;"	d
ASSERT_TRUE	../BDI/ufftest.h	103;"	d
BEFORE_TEST	../BDI/test_huffman.c	4;"	d	file:
BEFORE_TEST	../BDI/ufftest.h	126;"	d
BEGIN_TESTS	../BDI/ufftest.h	21;"	d
BothAreSpaces	../BDI/Select.cpp	/^bool BothAreSpaces(char lhs, char rhs) { $/;"	f
CHECK_TEST	../BDI/ufftest.h	37;"	d
END_TESTS	../BDI/ufftest.h	47;"	d
EPSILON	../BDI/ufftest.h	5;"	d
INT	../BDI/createTable.c	/^    INT,STRING;$/;"	e	enum:__anon1	file:
KEYORORDBUTNULL	../BDI/createTable.c	10;"	d	file:
LinkedList	../BDI/createTable.c	/^}LinkedList;$/;"	t	typeref:struct:l	file:
MAX_FAILS	../BDI/ufftest.h	3;"	d
MSG_SIZE	../BDI/ufftest.h	4;"	d
MULTIPLEKEY	../BDI/createTable.c	8;"	d	file:
MULTIPLEORD	../BDI/createTable.c	9;"	d	file:
PROBLEMSTOOPENFILE	../BDI/createTable.c	7;"	d	file:
STRING	../BDI/createTable.c	/^    INT,STRING;$/;"	e	enum:__anon1	file:
TABLEALREADYEXISTS	../BDI/createTable.c	6;"	d	file:
TEST	../BDI/ufftest.h	69;"	d
TOKENPASTE	../BDI/ufftest.h	12;"	d
TOKENPASTE2	../BDI/ufftest.h	13;"	d
Type	../BDI/createTable.c	/^} Type;$/;"	t	typeref:enum:__anon1	file:
UFFASSERT	../BDI/ufftest.h	82;"	d
UFF_TEST_H	../BDI/ufftest.h	2;"	d
_CRT_SECURE_NO_WARNINGS	../BDI/test_huffman.c	2;"	d	file:
_TEST	../BDI/ufftest.h	80;"	d
before	../BDI/test_huffman.c	/^void before()$/;"	f
compare_double	../BDI/ufftest.h	/^int compare_double(double a, double b) {$/;"	f
createTable	../BDI/createTable.c	/^void createTable(FILE* sql)$/;"	f
escreverJuncao	../BDI/Select.cpp	/^string escreverJuncao(string relacao, string relacaoB, string condicao, string nomeJuncao){$/;"	f
escreverProjecao	../BDI/Select.cpp	/^string escreverProjecao(string relacao, int qtdAtributos, string listaAtributos, string nomeProjecao){$/;"	f
escreverSelecao	../BDI/Select.cpp	/^string escreverSelecao(string relacao, string atr, string op, string valor, string nomeSelecao){$/;"	f
identificarComando	../BDI/Select.cpp	/^void identificarComando(string &comando){$/;"	f
key	../BDI/createTable.c	/^    bool key;$/;"	m	struct:__anon2	file:
l	../BDI/createTable.c	/^typedef struct l$/;"	s	file:
limpar	../BDI/Select.cpp	/^void limpar(string &s){$/;"	f
main	../BDI/Select.cpp	/^int main(int argc, char **argv){$/;"	f
main	../BDI/main.c	/^int main(int argc, char* argv[])$/;"	f
nameAtribute	../BDI/createTable.c	/^    char nameAtribute[501];$/;"	m	struct:__anon2	file:
notNull	../BDI/createTable.c	/^    bool notNull;$/;"	m	struct:__anon2	file:
ord	../BDI/createTable.c	/^    bool ord;$/;"	m	struct:__anon2	file:
parseAtr	../BDI/Select.cpp	/^string parseAtr(string where){$/;"	f
parseOp	../BDI/Select.cpp	/^string parseOp(string where){$/;"	f
parseVal	../BDI/Select.cpp	/^string parseVal(string where){$/;"	f
prox	../BDI/createTable.c	/^    struct l *prox;$/;"	m	struct:l	typeref:struct:l::l	file:
readAtributes	../BDI/createTable.c	/^LinkedList* readAtributes(FILE* sql)$/;"	f
select	../BDI/Select.cpp	/^void select(FILE *ponteiroArquivo){$/;"	f
split	../BDI/Select.cpp	/^std::vector<std::string> split(const std::string &s, char delim) {$/;"	f
split	../BDI/Select.cpp	/^void split(const std::string &s, char delim, std::vector<std::string> &elems) {$/;"	f
t	../BDI/createTable.c	/^    tableCTL t;$/;"	m	struct:l	file:
tableCTL	../BDI/createTable.c	/^} tableCTL;$/;"	t	typeref:struct:__anon2	file:
type	../BDI/createTable.c	/^    Type type;$/;"	m	struct:__anon2	file:
